import express from "express";
import bcrypt from "bcryptjs";
import accountController from "../controllers/accountController.js";
import connectDB from "../config/configDB.js";
import axios from "axios";
import { createComfirm } from "../models/comfirmModel.js";
import { check } from "../fuction/check.js";
import { generatePDF } from "../CreateReport/report.routes.js";
const db = connectDB();
const router = express.Router();

// =============================
// T√≠ch h·ª£p router xu·∫•t b√°o c√°o
// =============================
// router.use("/report", reportRouter); // ‚úÖ ƒê∆∞·ªùng d·∫´n: /api/report/pdf

router.post("/createAccount", async (req, res) => {
  const { username, password, email } = req.body;

  if (!username || !email || !password) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }

  try {
    // Ki·ªÉm tra t√†i kho·∫£n ƒë√£ t·ªìn t·∫°i
    db.get(
      `SELECT * FROM users WHERE username = ?`,
      [username],
      async (err, row) => {
        if (err) {
          console.error("‚ùå L·ªói truy v·∫•n:", err.message);
          return res.status(500).json({ message: "L·ªói truy v·∫•n database" });
        }

        if (row) {
          return res.status(400).json({ message: "T√†i kho·∫£n ƒë√£ t·ªìn t·∫°i" });
        }

        try {
          const salt = await bcrypt.genSalt(10);
          const newPassword = await bcrypt.hash(password, salt);

          // G·ªçi controller ƒë·ªÉ t·∫°o t√†i kho·∫£n
          await accountController(username, newPassword, email, res, db);
          return res.status(200).json({ message: "Th√†nh c√¥ng" });
        } catch (error) {
          return res.status(500).json({ message: "L·ªói khi x·ª≠ l√Ω m·∫≠t kh·∫©u" });
        }
      }
    );
  } catch (error) {
    console.error("‚ùå L·ªói h·ªá th·ªëng:", error.message);
    return res.status(500).json({ message: "L·ªói h·ªá th·ªëng" });
  }
});

router.post("/logIn", async (req, res) => {
  const { username, password } = req.body;
  try {
    db.get(
      `SELECT * FROM users WHERE username = ?`,
      [username],
      async (err, row) => {
        if (err) {
          return res.status(500).json({ message: "L·ªói truy v·∫•n database" });
        }
        if (!row) {
          return res.status(401).json({ message: "T√†i kho·∫£n kh√¥ng t·ªìn t·∫°i" });
        }
        const match = bcrypt.compare(password, row.password);
        if (match) {
          return res.status(200).json({ message: "ƒêƒÉng nh·∫≠p th√†nh c√¥ng" ,
          user_id: row.id,
          username: row.name
          });
        } else {
          return res.status(401).json({ message: "Sai m·∫≠t kh·∫©u" });
        }
      }
    );
  } catch (err) {
    return res.status(500).json({ message: "L·ªói server", error });
  }
});

router.post("/comfirmData", async (req, res) => {
  const { data, user_id } = req.body;
  if (!data || !user_id) {
    return res.status(400).json({ message: "Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin" });
  }
  try {
    const datacomfirm = check(data);
    if (datacomfirm.type === "url") {
      const reponse = await axios.post(
        "http://localhost:5000/api/checklink",
        {
          data: data,
        }
      );
      const created_at = new Date().toDateString();
      const { opinion, description, mal_w } = reponse.data;
      await createComfirm(db, user_id, data, opinion, description, created_at);
      res.status(200).json({
        message: "X√°c nh·∫≠n link th√†nh c√¥ng",
        opinion,
        description,
        mal_w,
        data,
        created_at
      });
    } else if (datacomfirm.type === "phone") {
      const reponse = await axios.get(
        `http://localhost:5000/api/lookup/<${data}>`
      );
    const { opinion, description, mal_w } = reponse.data;
      const created_at = new Date().toDateString();
      await createComfirm(db, user_id, data, opinion, description, created_at);
      return res
        .status(200)
        .json({ message: "X√°c nh·∫≠n sdt th√†nh c√¥ng", opinion, description });
    } else {
      return res.status(400).json({ message: "D·ªØ li·ªáu kh√¥ng h·ª£p l·ªá" });
    }
  } catch (error) {
    console.error("‚ùå L·ªói h·ªá th·ªëng:", error.message);
    return res
      .status(500)
      .json({ message: "L·ªói h·ªá th·ªëng", error: error.message });
  }
});
// api l·∫•y danh s√°ch theo user_id
router.post("/list", async (req, res) => {
  const { user_id } = req.body; // ho·∫∑c req.body n·∫øu b·∫°n d√πng POST
 console.log(user_id);
  if (!user_id) {
    return res.status(400).json({ message: "Thi·∫øu user_id" });
  }

  try {
    db.all(
      `SELECT * FROM analysis_history WHERE user_id = ? ORDER BY created_at DESC`,
      [user_id],
      (err, rows) => {
        if (err) {
          console.error("‚ùå L·ªói truy v·∫•n database:", err.message);
          return res.status(500).json({ message: "L·ªói truy v·∫•n database" });
        }
        // C√≥ d·ªØ li·ªáu th·∫≠t
        return res.status(200).json({
          message: "L·∫•y danh s√°ch th√†nh c√¥ng",
          count: rows.length,
          data: rows,
        });
      }
    );
  } catch (error) {
    console.error("‚ùå L·ªói h·ªá th·ªëng:", error.message);
    return res
      .status(500)
      .json({ message: "L·ªói h·ªá th·ªëng", error: error.message });
  }
});
// API xu·∫•t PDF b√°o c√°o
router.post("/report/pdf", async (req, res) => {
  const { user_id } = req.body;
  console.log("üìÑ Xu·∫•t PDF cho user_id:", user_id);

  if (!user_id) {
    return res.status(400).json({ message: "Thi·∫øu user_id" });
  }

  // ‚öôÔ∏è Thi·∫øt l·∫≠p header PDF CHU·∫®N
  res.setHeader("Content-Type", "application/pdf");
  res.setHeader("Content-Disposition", `attachment; filename=report_user_${user_id}.pdf`);
  res.status(200); // üî• B·∫Øt bu·ªôc ƒë·ªÉ tr√°nh l·ªói Axios 204

  try {
    // L·∫•y d·ªØ li·ªáu ng∆∞·ªùi d√πng hi·ªán t·∫°i
    db.all(
      `SELECT data AS input, opinion AS status, description AS note 
       FROM analysis_history 
       WHERE user_id = ? 
       ORDER BY created_at DESC`,
      [user_id],
      async (err, rows) => {
        if (err) {
          console.error("‚ùå L·ªói truy v·∫•n database:", err.message);
          return res.status(500).end("L·ªói truy v·∫•n database");
        }

        const demoData = [
          { input: "https://example.com", status: "An to√†n", note: "Kh√¥ng ph√°t hi·ªán m·ªëi nguy" },
          { input: "0912345678", status: "Nghi ng·ªù", note: "Nhi·ªÅu ph·∫£n √°nh spam" },
        ];

        const finalData = rows.length > 0 ? rows : demoData;

        // G·ªçi h√†m sinh PDF
        import("../CreateReport/report.routes.js").then(async (mod) => {
          const { generatePDF } = mod;
          await generatePDF(res, finalData);
        });
      }
    );
  } catch (error) {
    console.error("‚ùå L·ªói khi t·∫°o PDF:", error);
    res.status(500).end("L·ªói khi t·∫°o b√°o c√°o PDF");
  }
});

export default router;
